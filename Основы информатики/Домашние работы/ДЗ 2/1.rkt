(define (my-range a b d)
  (if (or (> a b) (= a b))
      '()
      (cons a (my-range (+ d a) b d))))

(define (my-flatten xs)
  (if (not (null? xs))
      (if (list? xs)
          (if (> (length xs) 1)
              (append (my-flatten (car xs)) (my-flatten (cdr xs)))
              (my-flatten (car xs)))
          (list xs))
      xs))

(define (my-element? x xs)
  (if (> (length xs) 0)
      (if (equal? x (car xs))
          (and (= 1 1))
          (my-element? x (cdr xs)))
      (and (= 1 0))))

(define (my-filter pred? xs)
  (if (> (length xs) 0)
      (if (pred? (car xs))
          (cons (car xs) (my-filter pred? (cdr xs)))
          (my-filter pred? (cdr xs)))
      '()))

(define (my-fold-left op xs)
  (if (> (length xs) 1)
      (my-fold-left op (cons (op (car xs) (cadr xs)) (cddr xs)))
      (car xs)))

(define (my-fold-right op xs)
  (define (right op xs)
  (if (> (length xs) 1)
      (right op (cons (op (cadr xs) (car xs) ) (cddr xs)))
      (car xs)))
  (right op (reverse xs)))
