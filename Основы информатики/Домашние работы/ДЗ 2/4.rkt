(define (make-multi-vector sizes . fill)
  (if (null? fill)
      (vector "m-v" (make-vector (apply * sizes)) sizes)
      (vector "m-v" (make-vector (apply * sizes) (car fill)) sizes)))

(define (multi-vector? m)
  (and (vector? m) (equal? (car (vector->list m)) "m-v")))

(define (multi-vector-ref m indices)
  (define (index indices)
    (let loop ((ind 0))
    (if (null? indices)
        ind
        (if (equal? 0 (car indices))
            (begin (set! indices (cdr indices))
                   (loop ind))
            (begin (set-car! indices (- (car indices) 1))
                   (set! ind (+ ind 1))
                   (loop ind))))))
  (vector-ref (cadr (vector->list m)) (index indices)))

(define (multi-vector-ref m indices)
  (define (index indices sizes)
    (if (equal? (length indices) 1)
        (car indices)
        (+ (* (car indices) (apply * (cdr sizes)))
           (index (cdr indices) (cdr sizes)))))
  (vector-ref (cadr (vector->list m)) (index indices (caddr (vector->list m)))))

(define (multi-vector-set! m indices x)
  (define (index indices sizes)
    (if (equal? (length indices) 1)
        (car indices)
        (+ (* (car indices) (apply * (cdr sizes)))
           (index (cdr indices) (cdr sizes)))))
  (vector-set! (cadr (vector->list m)) (index indices (caddr (vector->list m))) x)) 
