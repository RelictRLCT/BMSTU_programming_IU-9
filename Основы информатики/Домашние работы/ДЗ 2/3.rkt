(define (string-trim-left str)
  (if (or (equal? (car (string->list str)) #\tab)
          (equal? (car (string->list str)) #\space)
          (equal? (car (string->list str)) #\newline))
      (begin (cdr (string->list str))
             (string-trim-left (list->string (cdr (string->list str)))))
      str))

(define (string-trim-right str)
  (list->string (reverse (string->list (string-trim-left
                                        (list->string (reverse (string->list str))))))))

(define (string-trim str)
  (string-trim-right (string-trim-left str)))

(define (string-prefix? a b)
  (define (pref a b)
    (if (> (length (string->list a)) 0)
        (cons (if (equal? (car (string->list a)) (car (string->list b))) #t #f)
              (pref (list->string (cdr (string->list a)))
                    (list->string (cdr (string->list b)))))
        '()))
  (if (or (< (length (string->list a)) (length (string->list b)))
          (= (length (string->list a)) (length (string->list b)))) 
      (if (not (member #f (pref a b)))
          #t
          #f)
      #f))

(define (string-suffix? a b)
  (string-prefix? (list->string (reverse (string->list a)))
                  (list->string (reverse (string->list b)))))

(define (string-infix? a b)
  (if (or (> (string-length b) (string-length a))
          (= (string-length b) (string-length a)))
      (if (not (string-prefix? a b))
          (string-infix? a (list->string (cdr (string->list b))))
          #t)
      #f)      
  )

(define (string-split str sep)
  (define (delete-pref sep str)
    (define (del sep str)
      (if (= (string-length sep) 0)
          str
          
          (del (list->string (cdr (string->list sep))) (list->string (cdr (string->list str))))
          ))
    (define (dell sep str)
      (if (not (string-prefix? sep str))
          (if (string-infix? sep str)
              (dell sep (list->string (cdr (string->list str))))
              str)
          str))
    (if (string-infix? sep str) (del sep (dell sep str)) ""))
  (define (inf str sep)
    (if (> (string-length str) 0)
        (if (not (string-prefix? sep str))
            (list->string (cons (car (string->list str))
                                (string->list (inf (list->string (cdr (string->list str))) sep))))
            "")
        "")
    )
  (if (> (string-length str) 0)
      (cons (inf str sep) (string-split (delete-pref sep str) sep))
      '()))
